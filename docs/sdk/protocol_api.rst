=========
協議內容
=========

*************************
SDK 模式控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
進入 SDK 模式
^^^^^^^^^^^^^^^^^^^^^^^^^

IN：**command**

    - 描述
        - 控制機器人進入 SDK 模式
        - 當機器人成功進入 SDK 模式後，才可以回應其餘控制命令


^^^^^^^^^^^^^^^^^^^^^^^^^
退出 SDK 模式
^^^^^^^^^^^^^^^^^^^^^^^^^


IN: **quit**

    - 描述
        - 控制機器人退出 SDK 模式，重設所有設定項
        - Wi-Fi/USB 連接模式下，當連接斷開時，機器人會自動退出 SDK 模式

*************************
機器人控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
機器人運動模式控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN：**robot mode <mode>**
  
    - 描述
        - 設定機器人運動模式
    - 參數
        - *mode* (:data:`mode_enum`): 機器人運動模式
    - 示例
        - *robot mode chassis_lead* : 將機器人的運動模式設定為「雲台跟隨底盤模式」

.. note:: 機器人運動模式

    機器人運動模式描述了雲台與底盤之前相互作用與相互運動的關係，每種機器人模式都對應了特定的作用關係。

    機器人運動模式分為三種模式：

    1. 雲台跟隨底盤模式：該模式下，雲台的 YAW 軸會進入持續跟隨底盤 YAW 軸的運動的狀態，雲台將不響應所有控制指令中 YAW 軸控制的部分，影響指令有 `雲台運動速度控制`_ `雲台相對位置控制`_ `雲台絕對位置控制`_
    2. 底盤跟隨雲台模式：該模式下，底盤的 YAW 軸會進入持續跟隨雲台 YAW 軸的運動的狀態，底盤將不響應所有控制指令中 YAW 軸控制的部分，影響指令有 `底盤運動速度控制`_ `底盤輪子速度控制`_ `底盤相對位置控制`_
    3. 自由模式：該模式下，雲台的 YAW 軸與底盤的 YAW 軸運動互不影響

^^^^^^^^^^^^^^^^^^^^^^^^^
機器人運動模式獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robot mode ?**

    - 描述
        - 查詢當前機器人運動模式
    - 返回值
        - *mode* (:data:`mode_enum`): 機器人運動模式
    - 示例
        - IN：*robot mode ?*: 查詢當前的機器人運動模式
        - OUT: *chassis_lead*: 機器人返回當前的運動模式為 *雲台跟隨底盤模式*

.. warning:: 獲取指令中的 *?*

    注意：查詢指令中的 *?* 與前面命令部分中間存在一個空格

*************************
底盤控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
底盤運動速度控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **chassis speed x <speed_x>  y <speed_y> z <speed_z>**

    - 描述
        - 控制底盤運動速度
    - 參數
        - *speed_x* (float:[-3.5,3.5]): x 軸向運動速度，單位 m/s
        - *speed_y* (float:[-3.5,3.5]): y 軸向運動速度，單位 m/s
        - *speed_z* (float:[-600,600]): z 軸向旋轉速度，單位 °/s
    - 示例
        - *chassis speed x 0.1 y 0.1 z 1* : 底盤 x 軸速度為 0.1 m/s，y 軸速度為 0.1 m/s，z 軸旋轉速度為 1°/s 


^^^^^^^^^^^^^^^^^^^^^^^^^
底盤輪子速度控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **chassis wheel w1 <speed_w1> w2 <speed_w2> w3 <speed_w3> w4 <speed_w4>**
    
    - 描述
        - 控制四個輪子的速度
    - 參數
        - *speed_w1* (int:[-1000, 1000]): 右前萬向輪速度，單位 rpm
        - *speed_w2* (int:[-1000, 1000]): 左前萬向輪速度，單位 rpm
        - *speed_w3* (int:[-1000, 1000]): 右後萬向輪速度，單位 rpm
        - *speed_w4* (int:[-1000, 1000]): 左後萬向輪速度，單位 rpm
    - 示例
        - *chassis wheel w2 100 w1 12 w3 20 w4 11* : 底盤左前萬向輪的速度為 100 rpm，右前萬向輪速度為 12 rpm，右後萬向輪速度為 20 rpm，左後萬向輪速度為 11 rpm

^^^^^^^^^^^^^^^^^^^^^^^^^
底盤相對位置控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **chassis move { [x <distance_x>] | [y <distance_y>] | [z <degree_z>] } [vxy <speed_xy>] [vz <speed_z>]**
    
    - 描述
        - 控制底盤運動當指定位置，坐標軸原點為當前位置
    - 參數
        - *distance_x* (int:[-5, 5]): x 軸向運動距離，單位 m
        - *distance_y* (int:[-5, 5]): y 軸向運動距離，單位 m
        - *degree_z* (int:[-1800, 1800]): z 軸向旋轉角度，單位 °
        - *speed_xy* (int:(0, 3.5]): xy 軸向運動速度，單位 m/s
        - *speed_z* (int:(0, 600]): z 軸向旋轉速度， 單位 m/s
    - 示例
        - *chassiss move x 0.1 y 0.2* ：以當前位置為座標原點，向 x 軸運動 0.1 m，向 y 軸運動 0.2 m

^^^^^^^^^^^^^^^^^^^^^^^^^
底盤速度獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **chassis speed ?**

    - 描述
        - 獲取底盤速度資訊
    - 返回值
        - *<x> <y> <z> <w1> <w2> <w3> <w4>* ：x 軸向運動速度(m/s)，y 軸向運動速度(m/s)，z 軸向旋轉速度(°/s)，w1 右前萬向輪速度(rpm)，w2 左前萬向輪速速(rpm)，w3 右後萬向輪速度(rpm)，w4 左後萬向輪速度(rpm)
    - 示例
        - IN: *chassis speed ?* : 獲取底盤的運動速度資訊
        - OUT: *1 2 30 100 150 200 250* : 底盤當前的 x 軸向運動速度為 1 m/s，y 軸向運動速度 2 m/s，z 軸向旋轉速度為 20°/s，1 號輪子轉速為 100 rpm，2 號輪子轉速為 100 rpm，3 號輪子轉速為 100 rpm，4 號輪子轉速為 100 rpm


^^^^^^^^^^^^^^^^^^^^^^^^^
底盤位置獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **chassis position ?**

    - 描述
        - 獲取底盤位置資訊
    - 返回值
        - *<x> <y> <z>* ：x 軸位置(m)，y 軸位置(m)，偏航角度(°)
    - 示例
        - IN: *chassis position ?* ：獲取底盤的位置資訊
        - OUT: *1 1.5 20* ：底盤當前的位置距離通電時刻位置，沿 x 軸運動了 1 m，沿 y 軸運動了 1.5 m，旋轉了 20°

^^^^^^^^^^^^^^^^^^^^^^^^^
底盤姿態獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **chasssis attitude ?**

    - 描述
        - 獲取底盤姿態資訊
    - 返回值
        - *<pitch> <roll> <yaw>* ：pitch 軸角度(°)，roll 軸角度(°)，yaw 軸角度(°)
    - 示例
        - *chassis attitude ?* ：查詢底盤的姿態資訊

^^^^^^^^^^^^^^^^^^^^^^^^^
底盤狀態獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **chassis status ?**

    - 描述 
        - 獲取底盤狀態資訊
    - 返回值
        - *<static> <uphill> <downhill> <on_slope> <pick_up> <slip> <impact_x> <impact_y> <impact_z> <roll_over> <hill_static>* 
            - *static*：是否靜止
            - *uphill*：是否上坡
            - *downhill*：是否下坡
            - *on_slope*：是否溜坡
            - *pick_up*：是否被拿起
            - *slip*：是否滑行
            - *impact_x*：x 軸是否感應到撞擊
            - *impact_y*：y 軸是否感應到撞擊
            - *impact_z*：z 軸是否感應到撞擊
            - *roll_over*：是否翻車
            - *hill_static*：是否在坡上靜止
    - 示例
        - IN: *chassis status ?* ：查詢底盤的狀態
        - OUT: *0 1 0 0 0 0 0 0 0 0 0* : 底盤當前處於上坡狀態

^^^^^^^^^^^^^^^^^^^^^^^^^
底盤資訊推送控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN：**chassis push {[position <switch> pfreq <freq>][attitude <switch> afreq <freq>] | [status <switch> sfreq <switch>] [afreq <freq_all>]}**

    - 描述
        - 開啟/關閉底盤中相應屬性的資訊推送
        - 頻率設定
            - 各單獨的功能支援單獨的頻率設定，如：
                - *chassis push position on pfreq 1 attitude on* : 打開位置和姿勢推送，位置推送頻率為 1 Hz，姿勢推送頻率使用預設設定 5 Hz
            - 支援當前模組所有功能頻率統一設定，如：
                - chassis push freq 10 #chassis 推送統一為 10 Hz
                - chassis push position pfreq 1 freq 5 #此時有 freq 參數，將會忽略 pfreq
            - 支援的頻率 1, 5, 10, 20, 30, 50
        - 推送資料格式參見 `底盤推送資訊資料`_
    - 參數
        - *switch* (:data:`switch_enum`) ：當此處參數使用 *on* 時，表示開啟對應屬性的推送；當此處參數使用 *off* 時，表示關閉對應屬性的推送
        - *freq* (int:(1,5,10,20,30,50)) ：對應的屬性推送的推送頻率
        - *freq_all* (int:(1,5,10,20,30,50)) : 整個底盤所有相關推送資訊的推送頻率
    - 示例
        - *chassis push attitude on* : 開啟底盤姿態資訊推送
        - *chassis push attitude on status on* ：開啟底盤姿態、狀態資訊推送
        - *chassis push attitude on afreq 1 status on sfreq 5* ：開啟底盤的姿態資訊推送，推送頻率為每秒一次，同時開啟底盤的狀態資訊推送，推送頻率為每秒五次
        - *chassis push freq 10* ：底盤所有資訊推送的頻率為每秒十次

^^^^^^^^^^^^^^^^^^^^^^^^^
底盤推送資訊資料
^^^^^^^^^^^^^^^^^^^^^^^^^

OUT: **chassis push <attr> <data>**

    - 描述
        - 當使用者使能底盤資訊推送後，機器人會以設定的頻率向使用者推送相應資訊
    - 參數
        - *attr* (:data:`chassis_push_attr_enum`) : 訂閱的屬性名稱
        - *data* : 訂閱的屬性資料
            - 當 *attr* 為 **position** 時，*data* 內容為 *<x> <y>*
            - 當 *attr* 為 **attitude** 時，*data* 內容為 *<pitch> <roll> <yaw>*
            - 當 *attr* 為 **status** 時，*data* 內容為 *<static> <uphill> <downhill> <on_slope> <pick_up> <slip> <impact_x> <impact_y> <impact_z> <roll_over> <hill_static>*
    - 示例
        - *chassis push attitude 0.1 1 3* ：當前底盤的 pitch、roll、yaw 姿態資訊分別為 0.1、1、3

*************************
雲台控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台運動速度控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **gimbal speed p <speed> y <speed>**

    - 描述
        - 控制雲台運動速度
    - 參數
        - *p* (float:[-450, 450]) ：pitch 軸速度，單位 °/s
        - *y* (float:[-450, 450]) ：yaw 軸速度，單位 °/s
    - 示例
        - *gimbal speed p 1 y 1* ：雲台的 pitch 軸速度為 1°/s，yaw 軸速度為 1°/s

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台相對位置控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **gimbal move { [p <degree>] [y <degree>] } [vp <speed>] [vy <speed>]**

    - 描述
        - 控制雲台運動到指定位置，坐標軸原點為當前位置
    - 參數 
        - *p* (float:[-55, 55]) ：pitch 軸角度，單位 °
        - *y* (float:[-55, 55]) ：yaw 軸角度，單位 °
        - *vp* (float:[0, 540]) ：pitch 軸運動速速，單位 °/s
        - *vy* (float:[0, 540]) ：yaw 軸運動速度，單位 °/s
    - 示例
        - *gimbal move p 10* ：以當前位置為座標基準，控制雲台運動到 pitch 軸角度為 10° 的狀態

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台絕對位置控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **gimbal moveto { [p <degree>] [y <degree>] } [vp <speed>] [vy <speed>]**

    - 描述
        - 控制雲台運動到指定位置，坐標軸原點為通電位置
    - 參數
        - *p* (int:[-25, 30]) ：pitch 軸角度(°)
        - *y* (int:[-250, 250]) ：yaw 軸角度(°)
        - *vp* (int:[0, 540]) ：pitch 軸運動速速(°)
        - *vy* (int:[0, 540]) ：yaw 軸運動速度(°)
    - 示例
        - *giimbal moveto p 10 y -20 vp 0.1* ：以機器人通電位置為座標基準，控制雲台運動到 pitch 軸角度為 10°，yaw 軸角度為 -20° 的狀態，運動時指定 pitch 軸的運動速度為 0.1°/s

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台休眠控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **gimbal suspend**

    - 描述
        - 控制雲台進入休眠狀態
    - 示例
        - *gimbal suspend* ：使雲台進入休眠狀態

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台恢復控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **gimbal resume**

    - 描述
        - 控制雲台從休眠狀態中恢復
    - 參數
        - *None*
    - 示例
        - *gimbal resume* ：使雲台退出休眠狀態

.. warning:: 休眠狀態
    當雲台進入休眠狀態時，雲台兩軸電機將會釋放控制力，雲台整體不回應任何控制指令。

    要解除雲台休眠狀態，請參見 `雲台恢復控制`_

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台回中控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **gimbal recenter**

    - 描述
        - 雲台回中
    - 示例
        - *gimbal recenter* ：控制雲台回中

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台姿態獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **gimbal attitude ?**

    - 描述
        - 獲取雲台姿態資訊
    - 返回值
        - *<pitch> <yaw>* ：pitch 軸角度(°)，yaw 軸角度(°)
    - 示例
        - IN：*gimbal attitude ?* ：查詢雲台的角度資訊
        - OUT: *-10 20* ：雲台當前 pitch 軸角度 -10°，yaw 軸角度 20°

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台資訊推送控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **gimbal push <attr> <switch> [afreq <freq_all>]**

    - 描述
        - 開啟/關閉雲台中相應屬性的資訊推送,
        - 推送資料格式參見 `雲台推送資訊資料`_
    - 參數
        - *attr* (:data:`gimbal_push_attr_enum`) : 訂閱的屬性名稱
        - *switch* (:data:`switch_enum`) ：當此處參數使用 *on* 時，表示打開對應屬性的推送；當此處參數使用 *off* 時，表示關閉對應屬性的推送
        - *freq_all* : 雲台所有相關推送資訊的推送頻率
    - 示例
        - *gimbal push attitude on* ：打開雲台的資訊推送

^^^^^^^^^^^^^^^^^^^^^^^^^
雲台推送資訊資料
^^^^^^^^^^^^^^^^^^^^^^^^^

OUT: **gimabal push <attr> <data>**

    - 描述
        - 當使用者使能雲台資訊推送後，機器人會以設定的頻率向使用者推送相應資訊
    - 參數
        - *attr* (:data:`gimbal_push_attr_enum`) : 訂閱的屬性名稱
        - *data*: 訂閱的屬性資料
            - 當 *attr* 為 **attitude** 時，*data* 內容為 *<pitch> <yaw>*
    - 示例
        - *gimbal push attitude 20 10* ：當前雲台的 pitch 角度為 20°，yaw 角度為 10°

*************************
發射器控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
發射器單次發射量控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN：**blaster bead <num>**

    - 描述
        - 設定發射器單次發射量
    - 參數
        - *num* (int:[1,5]) ：發射量
    - 示例
        - *blaster bead 2* ：控制發射器單次發射兩發

^^^^^^^^^^^^^^^^^^^^^^^^^
發射器發射控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **blaster fire**

    - 描述
        - 控制水彈槍發射一次
    - 示例
        - *blaster fire* ：控制水彈槍發射一次

^^^^^^^^^^^^^^^^^^^^^^^^^
發射器單次發射量獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **blaster bead ?**

    - - 描述
        - 獲取水彈槍單次發射的水彈數
    - 返回值
        - *<num>* ：水彈槍單次發射的水彈數
    - 示例
        - IN: *blaster bead ?* ：查詢水彈槍單次發射的水彈數
        - OUT: *3* ：當前水彈槍單次發射水彈數量為 3

*************************
裝甲板控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
裝甲板靈敏度控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **armor sensitivity <value>**
    
    - 描述
        - 設定裝甲板打擊檢測靈敏度
    - 參數
        - *value* (int:[1,10]) ：裝甲板靈敏度，數值越大，越容易檢測到打擊。預設靈敏度值為 5
    - 示例
        - *armor sensitivity 1* ：設定裝甲板打擊檢測靈敏度為 1

^^^^^^^^^^^^^^^^^^^^^^^^^
裝甲板靈敏度獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **armor sensitivity ?**

    - 描述
        - 獲取裝甲板打擊檢測靈敏度
    - 參數
        - *<value>* ：裝甲板靈敏度
    - 示例
        - IN: *armor sensitivity ?* ：查詢裝甲板打擊檢測靈敏度
        - OUT: *5* ：查询装甲板打击检测灵敏度

^^^^^^^^^^^^^^^^^^^^^^^^^
装甲板事件上报控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **armor event <attr> <switch>**

    - 描述
        - 控制装甲板检测事件上报
        - 事件上报数据格式参见 `装甲板事件上报数据`_
    - 参数
        - *attr* (:data:`armor_event_attr_enum`) : 事件属性名称
        - *switch* (:data:`switch_enum`) : 事件属性控制开关
    - 示例
        - *armor event hit on* ：打开装甲板检测事件推送

^^^^^^^^^^^^^^^^^^^^^^^^^
装甲板事件上报数据
^^^^^^^^^^^^^^^^^^^^^^^^^

OUT: **armor event hit <index> <type>**

    - 描述
        - 當發生裝甲板敲擊事件時，可以從事件推送埠接收到該消息
    - 參數
        - *index* (int:[1, 6]) ：當前發生敲擊事件的裝甲板 ID
            - ``1`` 前
            - ``2`` 前
            - ``3`` 前
            - ``4`` 前
            - ``5`` 前
            - ``6`` 前
        - *type* (int:[0, 2]) ：當前敲擊事件的種類
            - ``0`` 水彈攻擊
            - ``1`` 撞擊
            - ``2`` 手敲擊
    - 示例
        - *armor event hit 1 0* ：1 號裝甲板檢測到水彈槍攻擊

*************************
聲音識別控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
聲音識別事件上報控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **sound event <attr> <switch>**

    - 描述
        - 聲音識別時間上報控制，開啟之後會有相關的事件上報
        - 事件上報資料格式詳參見 `聲音識別事件上報資料`_
    - 參數
        - *attr* (:data:`sound_event_attr_enum`) : 事件屬性名稱
        - *switch* (:data:`switch_enum`) : 事件屬性控制開關
    - 示例
        - *sound event applause on* ：開啟聲音（掌聲）識別

^^^^^^^^^^^^^^^^^^^^^^^^^
聲音識別事件上報資料
^^^^^^^^^^^^^^^^^^^^^^^^^

OUT: **sound event <attr> <data>**

    - 描述
        - 當發生特定聲音事件時，可以從事件推送埠接收到該資料
        - 使能該事件請參見 `聲音識別事件上報控制`_
    - 參數
        - *attr* (:data:`sound_event_attr_enum`):  事件屬性名稱
        - *data* ：事件屬性資料
            - 當 *attr* 為 ``applause`` 時， *data* 為 *<count>*，表示短時間內擊掌的次數
    - 示例
        - *sound event applause 2* ：識別到短時間內有 2 次拍掌

*************************
PWM 控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
PWM 輸出占空比控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **pwm value <port_mask> <value>**

    - 描述
        - PWM 輸出占空比設定
    - 參數
        - *port_mask* (hex:0-0xffff) ：PWM 拓展口遮罩組合, 編號為 X 的輸出口對應掩碼為 **1 << (X-1)**
        - *value* (float:0-100) ：PWM 輸出占空比，預設輸出為 12.5
    - 示例
        - *pwm value 1 50* : 控制 1 號 PWM 口的占空比為 50%

^^^^^^^^^^^^^^^^^^^^^^^^^
PWM 輸出頻率控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **pwm freq <port_mask> <value>**

    - 描述
        - PWM 輸出頻率設定
    - 參數
        - *port_mask* (hex:0-0xffff) ：PWM 拓展口掩碼組合, 編號為 X 的輸出口對應遮罩為 **1 << (X-1)**
        - *value* (int:XXX) ：PWM 輸出頻率值
    - 示例
        - *pwm freq 1 1000* : 控制 1 號 PWM 口的頻率為 1000 Hz

*************************
感測器轉接板控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
感測器轉接板 ADC 值獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **sensor_adapter adc id <adapter_id> port <port_num> ?**

    - 描述
        - 獲取感測器轉接板的 ADC 數值
    - 參數
        - *adapter_id* (int:[1, 6]) ：轉接板的 ID 號
        - *port_num* (int:[1, 2]) ：port 的編號
    - 返回值
        - *adc_value* ：測量得到相應轉接板上指定埠的電壓值，電壓取值範圍[0V, 3,3V] 
    - 示例
        - IN: *sensor_adapter adc id 1 port 1 ?* : 查詢 1 號轉接板上 1 號埠的 ADC 數值
        - OUT: *1.1* ：當前查詢埠 ADC 值為 1.1

^^^^^^^^^^^^^^^^^^^^^^^^^
感測器轉接板 IO 值獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **sensor_adapter io_level id <adapter_id> port <port_num> ?**

    - - 描述
        - 獲取感測器轉接板 IO 口的邏輯電平
    - 參數
        - *adapter_id* (int:[1, 6]) ：轉接板的 ID 號
        - *port_num* (int:[1, 2]) ：port 的編號
    - 返回值
        - *io_level_value* ：測量得到相應轉接板上指定埠的邏輯電平值，0 或 1
    - 示例
        - IN: *sensor_adapter io_level id 1 port 1 ?* ：查詢 1 號轉接板上 1 號埠的 IO 邏輯電平
        - OUT: *1* ：當前查詢埠的 IO 值為 1 

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
感測器轉接板 IO 引腳電平跳變時間值獲取
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **sensor_adapter pulse_period id <adapter_id> port <port_num>**

    - 描述
        - 獲取感測器轉接板 IO 口電平跳變持續時間
    - 參數
        - *adapter_id* (int:[1, 6])：轉接板的 ID 號
        - *port_num* (int:[1, 2])：port 的編號
    - 返回值
        - *pulse_period_value*: 測量得到相應轉接板上指定埠的電平跳變持續時間值，單位 ms
    - 示例
        - *sensor_adapter pulse_period id 1 port 1* ：查詢 1 號轉接板上 1 號埠的電平跳變持續時間

^^^^^^^^^^^^^^^^^^^^^^^^^
感測器轉接板事件上報控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **sensor_adapter event io_level <switch>**

    - 描述
        - 打開/關閉感測器轉接板電平跳變事件推送，打開後當 IO 上電平跳變時推送消息，見下一章中[感測器轉接板電平跳變事件推送](#感測器轉接板電平跳變推送)的介紹  
    - 參數
        - *switch* (:data:`switch_enum`)：電平跳變事件上報的控制開關
    - 示例
        - *sensor_adapter event io_level on* ：打開感測器轉接板的電平跳變事件推送

^^^^^^^^^^^^^^^^^^^^^^^^^
感測器轉接板事件上報資料
^^^^^^^^^^^^^^^^^^^^^^^^^

OUT: *sensor_adapter event io_level (<id>, <port_num>, <io_level>)*

    - 描述
        - 當感測器轉接板發生電平跳變時推送，可以從事件推送埠接收到此消息
        - 需要打開感測器轉接板電平跳變推送，參見 `感測器轉接板事件上報資料`_
    - 參數
        - *id*：感測器轉接板的 ID
        - *port_num*：IO 的 ID
        - *io_level*：當前的邏輯電平值
    - 示例
        - *sensor_adapter event io_level (1, 1, 0)* ：當前 1 號轉接板的 1 號 IO 的邏輯電平跳變為 0

^^^^^^^^^^^^^^^^^^^^^^^^^
紅外深度感測器開關控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **ir_distance_sensor measure <switch>**

    - 描述
        - 打開/關閉所有紅外感測器開關
    - 參數
        - *switch* (:data:`switch_enum`)：紅外感測器的開關
    - 示例
        - *ir_distance_sensor meaure on* ：打開所有紅外深度感測器

^^^^^^^^^^^^^^^^^^^^^^^^^
紅外深度感測器距離獲取
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **ir_distance_sensor distance <id> ?**

    - 描述
        - 獲取指定 ID 的紅外深度感測器距離
    - 參數
        - *id* (int:[1, 4])：紅外感測器的 ID
    - 返回值
        - *distance_value*：指定 ID 的紅外感測器測得的距離值，單位 mm
    - 示例
        - IN: *ir_distance_sensor distance 1* ：查詢 1 號紅外深度感測器測得的距離值
        - OUT: *1000* ：當前查詢紅外深度感測器距離值為 1000 mm

*************************
舵機控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
舵機角度控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **servo angle id <servo_id> angle <angle_value>**

    - 描述
        - 設定舵機角度
    - 參數
        - *servo_id* (int:[1, 3])：舵機的 ID
        - *angle_value* (float:[-180, 180])：指定的角度，單位 °
    - 示例
        - *servo angle id 1 angle 20* ：控制 1 號舵機的角度為 20°

^^^^^^^^^^^^^^^^^^^^^^^^^
舵機速度控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **servo speed id <servo_id> speed <speed_value>**

    - 描述
        - 設定指定舵機的速度
    - 參數
        - *servo_id* (int:[1, 3])：舵機的 ID
        - *speed_value* (float:[-1800, 1800])：設定的速度值，單位 °/s 
    - 示例
        - *servo speed id 1 speed 20* ：設定 1 號舵機的速度為 10°/s

^^^^^^^^^^^^^^^^^^^^^^^^^
舵機停止控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **servo stop**

    - 描述
        - 停止舵機運動
    - 示例
        - *servo stop* ：控制舵機停止運動

^^^^^^^^^^^^^^^^^^^^^^^^^
舵機角度查詢
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **servo angle id <servo_id> ?**

    - 描述
        - 獲取指定舵機的角度
    - 參數
        - *servo_id* (int:[1, 3])：舵機的 ID
    - 返回值
        - *angle_value*  : 指定舵機的角度值
    - 示例
        - IN: *servo angle id 1 ?* ：獲取 1 號舵機的角度值
        - OUT: *30* ：當前查詢舵機角度值為 30°

*************************
機械臂控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
機械臂相對位置運動控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robotic_arm move x <x_dist> y <y_dist>**

    - 描述
        - 控制機械臂運動一段距離，當前位置為座標原點
    - 參數
        - *x_dist* (float:[])：x 軸運動距離，單位 cm
        - *y_dist* (float:[]) ：y 軸運動距離，單位 cm
    - 示例
        - *robotic_arm move x 5 y 5* ：控制機械臂在 x 軸運動 5 cm，在 y 軸運動 5 cm

^^^^^^^^^^^^^^^^^^^^^^^^^
機械臂絕對位置運動控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robotic_arm moveto x <x_pos> y <y_pos>**

    - 描述
        - 控制機械臂運動到某位置，機器人通電位置為座標原點
    - 參數
        - *x_pos* (float:[])：x 軸運動到的座標，單位 cm
        - *y_pos* (float:[])：y 軸運動到的座標，單位 cm
    - 示例
        - *robotic_arm moveto x 5 y 5* ：控制機械臂 x 軸運動到 5 cm 的座標位置，y 軸運動到 5 cm 的座標位置

^^^^^^^^^^^^^^^^^^^^^^^^^
機械臂回中控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robotic_arm recenter**

    - 描述
        - 控制機械臂回中
    - 參數
        - *None*
    - 示例
        - *robotic_arm recenter* ：控制機械臂回中

^^^^^^^^^^^^^^^^^^^^^^^^^
機械臂停止運動控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robotic_arm stop**

    - 描述
        - 停止機械臂運動
    - 參數
        - *None*
    - 示例
        - *robotic_arm stop* ：停止機械臂運動

^^^^^^^^^^^^^^^^^^^^^^^^^
機械臂絕對位置查詢
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robotic_arm position ?**

    - 描述
        - 獲取機械臂的位置
    - 參數
        - *None*
    - 返回值
        - *<x_pos> <y_pos>*: 機械臂的位置座標
            - *x_pos*：x 軸的座標，單位 cm
            - *y_pos*：y 軸的座標，單位 cm
    - 示例
        - IN: *robotic_arm position ?* ：查詢機械臂的位置
        - OUT：*50 60* ：當前查詢機械臂的位置距離標定點 x 軸距離為 50 cm, y 軸距離為 60 cm

*************************
機械爪控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
機械爪張開運動控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robotic_gripper open [leve <level_num>]**

    - 描述
        - 張開機械爪
    - 參數
        - *level_num* (int:[1,4])：機械爪張開的力度等級，取值範圍[1,4]
    - 示例
        - *robotic_gripper open 1* ：控制機械臂以力度 1 打開

^^^^^^^^^^^^^^^^^^^^^^^^^
機械爪關閉運動控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robotic_gripper close [leve <level_num>]**

    - 描述
        - 閉合機械爪
    - 參數
        - *level_num* (int:[1,4])：機械爪閉合的力度等級，取值範圍[1,4]
    - 示例
        - *robotic_gripper close 1* ：控制機械臂以力度 1 關閉

.. note:: 機械爪控制力度

    **機械爪控制力度** 描述了機械爪在運動過程中的運動速度以及在堵轉狀態下最大夾取力度

    力度越大，運動速度越快，夾取力越大；反之。

^^^^^^^^^^^^^^^^^^^^^^^^^
機械爪開合狀態查詢
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **robotic_gripper status ?**

    - 描述
        - 獲取機械爪開合狀態
    - 參數
        - *None*
    - 返回值
        - *status*  : 機械爪當前你的開合狀態
            - ``0`` 機械爪完全閉合
            - ``1`` 機械爪既沒有完全閉合，也沒有完全張開
            - ``2`` 機械爪完全張開
    - 示例
        - IN: *robotic_gripper status ?* ：獲取機械爪的開合狀態
        - OUT: *2* ：當前查詢的機械爪狀態為張開

*************************
影片流控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
影片流開啟控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **stream on**

    - 描述
        - 打開影片流
        - 打開後，可從影片流埠接收到 H.264 編碼的碼流資料
    - 示例
        - *stream on* ：打開影片流

^^^^^^^^^^^^^^^^^^^^^^^^^
影片流關閉控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **stream off**

    - 描述
        - 關閉影片流
        - 關閉影片流後，H.264 編碼的碼流資料將會停止輸出
    - 示例
        - *stream off* ：關閉影片流

*************************
音訊流控制
*************************

^^^^^^^^^^^^^^^^^^^^^^^^^
音訊流開啟控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **audio on**

    - 描述
        - 打開音訊流
        - 關閉音訊流後，可以從音訊流埠接收到 Opus 編碼的音訊流資料
    - 示例
        - *audio on* ：打開音訊流

^^^^^^^^^^^^^^^^^^^^^^^^^
音訊流關閉控制
^^^^^^^^^^^^^^^^^^^^^^^^^

IN: **audio off**

    - 描述
        - 關閉音訊流
        - 關閉音訊流後，Opus 編碼的音訊流資料將會停止輸出
    - 示例
        - *audio off* ：關閉音訊流

*************************
IP 广播
*************************

OUT: **robot ip <ip_addr>**

    - 描述
        - 當未與機器人建立連接時，可以從 IP 廣播埠接收到此消息，連接成功後，該消息停止廣播
        - 描述當前機器人的 IP 位址，適用于與機器人在同一局域網內，但未知機器人 IP 資訊的情況
    - 參數
        - *ip_addr* : 機器人當前 IP 地址
    - 示例
        - *robot ip 192.168.1.102* : 機器人當前的 IP 地址為 192.168.1.102
